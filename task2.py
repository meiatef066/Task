# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KahfmnuL6JqNkbUUOEyF_mVklUo6vQ5X
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded = files.upload()

url='https://github.com/meiatef066/Task.git'
dataSalary=pd.read_csv('Salaries.csv')
print(dataSalary)

# Load your dataset
df = pd.read_csv('/content/Salaries.csv')
df.head()

"""1. Basic Data Exploration: Identify the number of rows and columns in the dataset, determine the data types of each column, and check for missing values in each column."""

num_row,num_cols=dataSalary.shape
print (f'Number of Rows:{num_row}')
print(f'Number of columns:{num_cols}')

data_type=dataSalary.dtypes
print('data type of each colomn :')
print (data_type)

missing_value=dataSalary.isnull().sum()
print(f'missing value in each column:{missing_value}')

"""2. Descriptive Statistics: Calculate basic statistics mean, median, mode, minimum, and maximum salary, determine the range of salaries, and find the standard deviation."""

#calc range
salary_range=dataSalary['TotalPay'].max()-dataSalary['TotalPay'].min()
print(f'salary range = {salary_range} ')

#standard deviation
std_deviation=dataSalary['TotalPay'].std()
print(f'standard deviation = {std_deviation} ')

# max
max_salary=dataSalary['TotalPay'].max()
print(f' maximum salary : {max_salary} ')
# min
min_salary=dataSalary['TotalPay'].min()
print(f' minimum salary : {min_salary} ')

#calc mode
mode_value=dataSalary.mode()
print(f' mode_value : {mode_value} ')

#display basic statistics
basic_statistics=dataSalary.describe()
print(f'basic_statistics : {basic_statistics}')

"""3. Data Cleaning: Handle missing data by suitable method with explain why you use it.
:
"""

missing_data_col = dataSalary.columns[dataSalary.isnull().any()]

"""4. Basic Data Visualization: Create histograms or bar charts to visualize the distribution of salaries, and use pie charts to represent the proportion of employees in different departments."""

# Histogram for Salary Distribution
plt.figure(figsize=(10, 6))
plt.hist(dataSalary['TotalPay'], bins=20, color='skyblue', edgecolor='black')
plt.title('Salary Distribution')
plt.xlabel('Salary')
plt.ylabel('Frequency')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Bar chart for Department Proportion
department_counts = dataSalary['JobTitle'].value_counts()
plt.figure(figsize=(8, 8))
plt.bar(department_counts.index, department_counts, color='salmon')
plt.title('Proportion of Employees in Different Departments')
plt.xlabel('Department')
plt.ylabel('Number of Employees')
# plt.xticks(rotation=100, ha='right')
plt.show()

"""5.

"""

grouped_data = dataSalary.groupby('TotalPay')

# Calculate summary statistics for each group
group_summary = grouped_data.agg({
    'TotalPay': [ 'min', 'max']
})
# Display the group summary
print(group_summary)
# Compare average salaries across different groups
average_salary_by_department = grouped_data['TotalPay'].mean()
print('\nAverage Salaries by Department:')
print(average_salary_by_department)

correlation = dataSalary['TotalPayBenefits'].corr(df['TotalPay'])

# Display the correlation coefficient
print(f'Correlation between Salary and Years of Experience: {correlation}')

# Visualize the relationship with a scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x='TotalPay', y='TotalPayBenefits', data=dataSalary, color='blue', alpha=0.6)
plt.title('Scatter Plot: TotalPay vs.TotalPayBenefits')
plt.xlabel('TotalPay')
plt.ylabel('TotalPayBenefits')
plt.grid(True, linestyle='--', alpha=0.5)

import seaborn as sns